/* 
 * @(#)DoodleMainActivity.java    Created on 2014-4-2
 * Copyright (c) 2014 ZDSoft Networks, Inc. All rights reserved.
 * $Id$
 */
package com.xuan.tuya;

import java.io.File;
import java.util.Date;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.RelativeLayout;

import com.dazzle.bigappleui.utils.DateUtils;
import com.winupon.andframe.bigapple.utils.uuid.UUIDUtils;
import com.xuan.tuya.common.Constants;
import com.xuan.tuya.ioc.InjectView;
import com.xuan.tuya.utils.BitmapDecoder;
import com.xuan.tuya.utils.DialogUtils;
import com.xuan.tuya.utils.FileUtils;
import com.xuan.tuya.utils.LogUtils;
import com.xuan.tuya.view.ShowImageView;
import com.xuan.tuya.view.crop.CropImageActivity;

/**
 * 截图界面
 * 
 * @author xuan
 * @version $Revision: 1.0 $, $Date: 2014-4-2 下午2:59:45 $
 */
public class DoodleMainActivity extends BasicActivity {
    private static final int REQUEST_DOODLE_LINE = 1;// 涂鸦
    private static final int REQUEST_DOODLE_TEXT = 2;// 添加文字
    private static final int REQUEST_CUT_OUT = 3;// 裁剪

    @InjectView(R.id.returnBtn)
    private Button returnBtn;

    @InjectView(R.id.rightBtn)
    private Button rightBtn;

    @InjectView(R.id.tab0Layout)
    private RelativeLayout tab0Layout;

    @InjectView(R.id.tab1Layout)
    private RelativeLayout tab1Layout;

    @InjectView(R.id.tab2Layout)
    private RelativeLayout tab2Layout;

    @InjectView(R.id.tab3Layout)
    private RelativeLayout tab3Layout;

    @InjectView(R.id.tab4Layout)
    private RelativeLayout tab4Layout;

    @InjectView(R.id.image)
    private ShowImageView image;

    private Bitmap bitmap;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.doodle_main);

        initBitmap();
        initTab();

        // 确定
        rightBtn.setOnClickListener(new Button.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    FileUtils.copyFile(new File(Constants.EDIT_PIC_TEMP), new File(Constants.PIC_STORE_PATH + "/"
                            + DateUtils.date2StringByDay(new Date()) + "-" + UUIDUtils.createId() + ".jpg"));
                    FileUtils.createDir(new File(Constants.EDIT_PIC_TEMP));
                    FileUtils.createDir(new File(Constants.EDIT_PIC));

                    setResult(RESULT_OK, getIntent());
                    DoodleMainActivity.this.finish();

                }
                catch (Exception e) {
                    LogUtils.e("", e);
                }
            }
        });

        // 返回
        returnBtn.setOnClickListener(new Button.OnClickListener() {
            @Override
            public void onClick(View v) {
                DialogUtils.returnAlert(DoodleMainActivity.this);
            }
        });
    }

    private void initBitmap() {
        try {
            if (null != bitmap) {
                bitmap.recycle();
                bitmap = null;
            }

            bitmap = BitmapDecoder.decodeSampledBitmapFromFile(Constants.EDIT_PIC_TEMP, 1000, 1000);
        }
        catch (OutOfMemoryError e) {
            // IF OOM
            finish();
        }

        image.setImageBitmap(bitmap);
    }

    private void initTab() {
        // 重置
        tab0Layout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    FileUtils.copyFile(new File(Constants.EDIT_PIC), new File(Constants.EDIT_PIC_TEMP));
                    initBitmap();
                }
                catch (Exception e) {
                    LogUtils.e("", e);
                }
            }
        });

        // 顺时针旋转90读图片
        tab1Layout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Matrix matrix = new Matrix();
                matrix.postRotate(90);
                bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
                image.setImageBitmap(bitmap);
                FileUtils.saveToSDCard(Constants.EDIT_PIC_TEMP, bitmap);
            }
        });

        // 裁剪
        tab2Layout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // ImageUtils.getCutImage(DoodleMainActivity.this, Uri.fromFile(new File(Constants.EDIT_PIC_TEMP)),
                // REQUEST_CUT_OUT, Constants.EDIT_PIC_TEMP);
                Intent intent = new Intent();
                intent.putExtra(CropImageActivity.PARAM_INPUT_FILENAME, Constants.EDIT_PIC_TEMP);
                intent.putExtra(CropImageActivity.PARAM_OUTPUT_FILENAME, Constants.EDIT_PIC_TEMP);
                intent.setClass(DoodleMainActivity.this, CropImageActivity.class);
                startActivityForResult(intent, REQUEST_CUT_OUT);
            }
        });

        // 涂鸦
        tab3Layout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                intent.setClass(DoodleMainActivity.this, DoodleLineActivity.class);
                startActivityForResult(intent, REQUEST_DOODLE_LINE);
            }
        });

        // 添加文字
        tab4Layout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                // intent.putExtra(BITMAP_TEMP, bitmap);
                intent.setClass(DoodleMainActivity.this, DoodleTextActivity.class);
                startActivityForResult(intent, REQUEST_DOODLE_TEXT);
            }
        });
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            switch (requestCode) {
            case REQUEST_DOODLE_LINE:
                // 涂鸦返回
                initBitmap();
                break;
            case REQUEST_DOODLE_TEXT:
                // 添加文字返回
                initBitmap();
                break;
            case REQUEST_CUT_OUT:
                // 裁剪返回
                initBitmap();
                break;
            }
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        if (null != bitmap) {
            bitmap.recycle();
            bitmap = null;
        }
    }

}
